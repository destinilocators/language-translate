{"version":3,"sources":["images/destinilogo.svg","components/header.tsx","components/translation-input.tsx","components/translation-output.tsx","components/loading.tsx","components/help-model.tsx","components/error-message.tsx","components/api.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Header","this","props","isModelShowing","updateMainState","id","src","destinilogo","alt","onClick","showHelpModel","size","icon","faQuestionCircle","React","TranslationInput","handleTranslations","bind","value","target","isValidJSON","enableButtonIfJSONHasProperties","JSON","parse","input","e","inputText","Object","keys","length","userTypedInput","className","placeholder","onChange","name","Component","TranslationOutput","changeTranslateToLangauge","event","toLanguage","translationList","readOnly","LoadingIcon","isTranslating","faArrowRight","faSpinner","spin","HelpModel","shouldHelpModelShow","hideModel","faTimes","rel","href","stringify","data","ErrorMessage","errorMessage","API","listToTranslate","translateTo","completedTranslationList","i","fetch","getAPIReqestOptions","translationsResponse","json","parsedResponse","status","error","message","push","response","isSuccessful","mockTranslation","method","headers","body","App","state","setToLoadingThenTranslateUserInput","newState","setState","translateUserInput","listWithoutCountKeys","filterOutCountKeysFromUserInput","translateReadyObject","convertListToTranslateReadyObject","listOfDividedTranslations","separateTranslationsIntoChunks","translateThenDisplay","filter","key","indexOf","inputKeys","finalTranslateReadyList","translateReadyList","convertCurrentObjectToTranslatableObject","apply","Array","isArray","convertIndexValueFromArrayToTranslatableObject","convertValuesFromObjectToTranslateObject","objectList","targetObjectKey","whichObjectKeyShouldBeUsed","map","objectIndex","translationSection","list","copyOfTranslationList","dividedTranslationList","splice","translationsList","getTranslations","then","translationResult","displayTranslationsIfSuccessful","catch","displayErrorMessage","reformatAndDisplayTranslations","combinedTranslations","flattenTranslationsList","translations","mapTranslationsBackToUserInput","reduce","flattenedArray","item","concat","copyOfUserInput","combineTranslationsWithIndividualKeys","translationsForThisObjectKey","arrKey","listOfTranslations","shift","targetKey","text","role","disabled","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.4a2201be.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/destinilogo.e5520ef9.svg\";","import * as React from \"react\";\nimport destinilogo from '../images/destinilogo.svg';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faQuestionCircle } from '@fortawesome/free-solid-svg-icons'\nimport './header.css';\n\ninterface IProps {\n  isModelShowing: boolean;\n  updateMainState: Function;\n}\n\nexport default class Header extends React.Component<IProps, {}> {\n\n  showHelpModel(): void {\n    if (this.props.isModelShowing === false) {\n      this.props.updateMainState({\n        isModelShowing: true\n      })\n    }\n  }\n\n  render() {\n    return (<header>\n      <div id=\"header-wrapper\">\n        <h1 id=\"header-logo\">\n          <img src={destinilogo} alt=\"destini logo\"/>\n          <span id=\"logo-sub-text\"> translator</span>\n        </h1>\n        <figure onClick={() => this.showHelpModel()} id=\"help-icon\">\n          <FontAwesomeIcon size=\"lg\" icon={faQuestionCircle} />\n        </figure>\n      </div>\n    </header>);\n  }\n}\n\n","import React from 'react';\nimport './translation.css';\n\ninterface IProps {\n  updateMainState: Function;\n}\n\nexport default class TranslationInput extends React.Component<IProps, {}> {\n  constructor(props) {\n    super(props);\n    this.handleTranslations = this.handleTranslations.bind(this);\n  }\n\n  handleTranslations({target: {value}}): void {\n    if (this.isValidJSON(value)) {\n      this.enableButtonIfJSONHasProperties(JSON.parse(value));\n    } else {\n      this.props.updateMainState({ isValidJSON: false });\n    }\n  }\n\n  isValidJSON(input: string): boolean {\n    try {\n      JSON.parse(input);\n    } catch(e) {\n      return false;\n    }\n    \n    return true;\n  }\n\n  enableButtonIfJSONHasProperties(inputText: string): void {\n    let inputTextKeys = Object.keys(inputText);\n    if (inputTextKeys.length > 0) {\n      this.props.updateMainState({ userTypedInput: inputText, isValidJSON: true });\n    } else {\n      this.props.updateMainState({ isValidJSON: false });\n    }\n  }\n\n  render() {\n    return (\n    <div className=\"textarea-wrapper left-align\">\n      <h2 className=\"from-text\">English</h2>\n      <textarea placeholder=\"Enter Valid JSON\" onChange={this.handleTranslations} name=\"translation-input\" id=\"translation-input\" className=\"translation-textarea\"></textarea>\n    </div>);\n  }\n}\n","import React from 'react';\nimport './translation.css';\n\ninterface IProps {\n  translationList: string;\n  updateMainState: Function;\n}\n\nexport default class TranslationOutput extends React.Component<IProps, {}> {\n  \n  constructor(props) {\n    super(props);\n    this.changeTranslateToLangauge = this.changeTranslateToLangauge.bind(this);\n  }\n\n  changeTranslateToLangauge(event): void {\n    this.props.updateMainState({\n      toLanguage: event.target.value,\n      translationList: \"\"\n    });\n  }\n\n  render() {\n    return (<div className=\"textarea-wrapper right-align\">\n      <select onChange={this.changeTranslateToLangauge} name=\"languages\" id=\"language-dropdown\">\n        <option value=\"fr\">French</option>\n        <option value=\"es\">Spanish</option>\n        <option value=\"it\">Italian</option>\n        <option value=\"de\">German</option>\n      </select>\n      <textarea value={this.props.translationList} readOnly={true} id=\"translation-output\" className=\"translation-textarea\"></textarea>\n    </div>);\n  }\n}\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faArrowRight, faSpinner } from '@fortawesome/free-solid-svg-icons'\nimport './loading.css';\n\nconst LoadingIcon = (props) => {\n    return (<figure className=\"to-arrow\">\n        { props.isTranslating === false \n            ? <FontAwesomeIcon icon={faArrowRight} /> \n            : <FontAwesomeIcon size=\"lg\" icon={faSpinner} spin />\n        }\n    </figure>)\n}\n\nexport default LoadingIcon;","import React, { createRef } from 'react';\nimport data from '../data/language-template.json';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport './help-model.css';\n\ninterface IProps {\n    shouldHelpModelShow: boolean;\n    updateMainState: Function;\n}\n\nexport default class HelpModel extends React.Component<IProps, {}> {\n\n    constructor(props) {\n        super(props);\n    }\n\n    hideModel(): void {\n        this.props.updateMainState({\n            isModelShowing: false\n        });\n    }\n\n    render() {\n        const { shouldHelpModelShow } = this.props;\n        \n        return(<section id=\"help-model-container\" className={shouldHelpModelShow === true ? \"show-model\" : \"hide-model\"}>\n            <div onClick={() => this.hideModel()} id=\"model-overlay\" className={shouldHelpModelShow === true ? \"fadein transition\" : \"hidden\"}></div>\n            <div id=\"help-model\" className={shouldHelpModelShow === true ? \"fadein transition\" : \"hidden\"}>\n                <div onClick={() => this.hideModel()} className=\"close-model\">\n                    <FontAwesomeIcon icon={faTimes} />\n                </div>\n                <h1 className=\"model-header\">Destini Translator</h1>\n                <h3 className=\"model-sub-header\">How To Use:</h3>\n                <ul id=\"\">\n                    <li className=\"model-text\">\n                        Copy the JSON language template below and paste into the English export field of the International Configuration. This JSON file has all the values that the locator requires.\n                    </li>\n                    <li className=\"model-text\">\n                        Within the International Configuration model, fill out all the required fields according to the locators design.\n                    </li>\n                    <li className=\"model-text\">\n                        Copy and paste the JSON from the export field into the Destini translator under the \"English\" header. If the JSON is valid the button will become active. You can validate your JSON by using <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://jsonlint.com/\">https://jsonlint.com/</a>. \n                    </li>\n                    <li className=\"model-text\">\n                        Select the desired language and click \"TRANSLATE\".\n                    </li>\n                    <li className=\"model-text\">\n                        Once your translations are complete, you can copy the output and paste it in the client's International Configuration export field and click <span className=\"apply-btn\">Apply</span>.\n                    </li>\n                </ul>\n                <section id=\"json-template\">\n                    <textarea id=\"json-template-field\" readOnly={true} value={ JSON.stringify(data, null, 5) }></textarea>\n                </section>   \n            </div>\n        </section>)\n    }\n}","import React from 'react';\nimport './error-message.css';\n\nconst ErrorMessage = ({errorMessage}) => {\n    return (<section id=\"error-message\">{errorMessage !== \"\" ? errorMessage : null}</section>);\n}\n\nexport default ErrorMessage;","import mockTranslation from '../data/mockTranslation.json';\n\nexport default class API {\n\n    static async getTranslations(listToTranslate, translateTo) {\n        const completedTranslationList = [];\n        for (let i = 0; i < listToTranslate.length; i++) {\n            try {\n                let translationsResponse = await fetch(`https://api.cognitive.microsofttranslator.com/translate?api-version=3.0&from=en&to=${translateTo}`, this.getAPIReqestOptions(listToTranslate[i]));\n                let parsedResponse = await translationsResponse.json();\n                if (translationsResponse.status < 200 || translationsResponse.status > 299) throw `Status: ${translationsResponse.status}. ${parsedResponse.error.message}`;\n                completedTranslationList.push(parsedResponse);\n            } catch (errorMessage) {\n                return {\n                    response: errorMessage,\n                    isSuccessful: false\n                }\n            }\n        }\n        return {\n            response: completedTranslationList,\n            isSuccessful: true\n        }\n    }\n\n\n    static async getMockTranslations () {\n        return {\n            response: mockTranslation,\n            isSuccessful: true\n        };\n    }\n\n    static getAPIReqestOptions = (listToTranslate) => ({\n        method: 'POST',\n        headers: {\n            'Ocp-Apim-Subscription-Key': 'f44ce021bfa54ac9aa855d71b5250cae',\n            'Content-Type': 'application/json; charset=utf-8',\n        },\n        body: JSON.stringify(listToTranslate)\n    })\n}","import React from 'react';\nimport Header from './components/header';\nimport TranslationInput from './components/translation-input';\nimport TranslationOutput from './components/translation-output';\nimport LoadingIcon from './components/loading';\nimport HelpModel from './components/help-model'\nimport ErrorMessage from './components/error-message';\nimport API from './components/api';\nimport './App.css';\n\ninterface IState {\n  translationList: string;\n  userTypedInput: Object;\n  isValidJSON: boolean;\n  isModelShowing: boolean;\n  isTranslating: boolean;\n  errorMessage: string;\n  toLanguage: string\n}\n\nexport default class App extends React.Component<{}, IState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      translationList: \"\",\n      userTypedInput: \"\",\n      isValidJSON: false,\n      isModelShowing: false,\n      isTranslating: false,\n      errorMessage: \"\",\n      toLanguage: 'fr'\n    }\n    \n    this.updateMainState = this.updateMainState.bind(this);\n    this.setToLoadingThenTranslateUserInput = this.setToLoadingThenTranslateUserInput.bind(this);\n  }\n\n  updateMainState(newState: object): void {\n    this.setState(newState);\n  }\n\n  setToLoadingThenTranslateUserInput(): void {\n    this.setState({\n      isTranslating: true\n    }, () => {\n      this.translateUserInput();\n    });\n  }\n\n  translateUserInput(): void {\n    let listWithoutCountKeys = this.filterOutCountKeysFromUserInput();\n    let translateReadyObject = this.convertListToTranslateReadyObject(listWithoutCountKeys);\n    let listOfDividedTranslations = this.separateTranslationsIntoChunks(translateReadyObject);\n    this.translateThenDisplay(listOfDividedTranslations);\n  }\n\n  filterOutCountKeysFromUserInput(): string[] {\n    return Object.keys(this.state.userTypedInput).filter(key => key.indexOf('Count') === -1);\n  }\n\n  convertListToTranslateReadyObject(inputKeys: string[]): object[] {\n    const finalTranslateReadyList: object[] = [];\n    for (let i = 0; i < inputKeys.length; i++) {\n      let translateReadyList = this.convertCurrentObjectToTranslatableObject(inputKeys[i]);\n      finalTranslateReadyList.push.apply(finalTranslateReadyList, translateReadyList);\n    }\n    return finalTranslateReadyList;\n  }\n  \n  convertCurrentObjectToTranslatableObject(key: string): object[] {\n    if (Array.isArray(this.state.userTypedInput[key])) {\n      return this.convertIndexValueFromArrayToTranslatableObject(key, this.state.userTypedInput[key]);\n    } else {\n      return this.convertValuesFromObjectToTranslateObject(this.state.userTypedInput[key]);\n    }\n  }\n\n  convertIndexValueFromArrayToTranslatableObject(key: string, objectList: object[]): object[] {\n    let targetObjectKey = this.whichObjectKeyShouldBeUsed(key);\n    return objectList.map(objectIndex => ({\"text\": objectIndex[targetObjectKey]}));\n  }\n\n  whichObjectKeyShouldBeUsed(key: string): string {\n    return (key === \"autotext\") ? \"val\" : \"name\";\n  }\n\n  convertValuesFromObjectToTranslateObject(translationSection: object): object[] {\n    return Object.keys(translationSection).map(key => ({\"text\": translationSection[key]}));\n  }\n\n  separateTranslationsIntoChunks(list: object[]): object[] {\n    let copyOfTranslationList = [...list];\n    const dividedTranslationList: any = [];\n    while (copyOfTranslationList.length) {\n      dividedTranslationList.push(copyOfTranslationList.splice(0, 100));\n    }\n    return dividedTranslationList;\n  }\n\n  translateThenDisplay(translationsList: object[]): void {\n    API.getTranslations(translationsList, this.state.toLanguage).then(translationResult => {\n      this.displayTranslationsIfSuccessful(translationResult);\n    }).catch(errorMessage => {\n      this.displayErrorMessage(errorMessage);\n    });\n  }\n\n  displayTranslationsIfSuccessful({response, isSuccessful}): void {\n    if (isSuccessful) {\n      this.reformatAndDisplayTranslations(response);\n    } else {\n      this.displayErrorMessage(response);\n    }\n  }\n\n  displayErrorMessage(message: string): void {\n    this.setState({\n      errorMessage: message,\n      isTranslating: false\n    });\n  }\n\n  reformatAndDisplayTranslations(translationsList: object[]): void {\n    const combinedTranslations = this.flattenTranslationsList(translationsList);\n    const translations = this.mapTranslationsBackToUserInput(combinedTranslations);\n    this.setState({\n      translationList: JSON.stringify(translations),\n      isTranslating: false\n    });\n  }\n\n  flattenTranslationsList(translationsList: any): object[] {\n    return translationsList.reduce((flattenedArray, item) => flattenedArray.concat(item));\n  }\n\n  mapTranslationsBackToUserInput(translationList: object[]): object {\n    const copyOfUserInput = {...this.state.userTypedInput};\n    for (let key in copyOfUserInput) {\n      if (copyOfUserInput[key] instanceof Object) {\n        this.combineTranslationsWithIndividualKeys({key, copyOfUserInput, translationList});\n      }\n    }\n    return copyOfUserInput;\n  }\n\n  combineTranslationsWithIndividualKeys({key, copyOfUserInput, translationList}): void {\n    const translationsForThisObjectKey = translationList.splice(0, Object.keys(copyOfUserInput[key]).length);\n    for (let arrKey in copyOfUserInput[key]) {\n      let listOfTranslations: any = translationsForThisObjectKey.shift();\n      if (Array.isArray(copyOfUserInput[key])) {\n        let targetKey = this.whichObjectKeyShouldBeUsed(key);\n        copyOfUserInput[key][arrKey][targetKey] = listOfTranslations.translations[0].text;\n      } else {\n        copyOfUserInput[key][arrKey] = listOfTranslations.translations[0].text;\n      }\n    }\n  }\n\n  render() {\n    const { isModelShowing, errorMessage, isValidJSON, isTranslating, translationList } = this.state;\n    \n    return (<main role=\"main\">\n      <Header updateMainState={this.updateMainState} isModelShowing={isModelShowing} />\n      <ErrorMessage errorMessage={errorMessage} />\n      <section id=\"translations-wrapper\">\n        <HelpModel updateMainState={this.updateMainState} shouldHelpModelShow={isModelShowing} />\n        <TranslationInput updateMainState={this.updateMainState}/>\n        <LoadingIcon isTranslating={isTranslating} />\n        <TranslationOutput updateMainState={this.updateMainState} translationList={translationList} />\n        <button className=\"translate-button\" onClick={this.setToLoadingThenTranslateUserInput} disabled={!isValidJSON}>Translate</button>\n      </section>\n    </main>);\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}